{"version":3,"sources":["webpack:///./src/components/image-empty-state.js","webpack:///./src/pages/test.js"],"names":["Image","data","useStaticQuery","fluid","placeholderImage","childImageSharp","TestPage","index","pageSectionVariant","PageSectionVariants","default","title","Card","CardTitle","CardBody","TextContent","TextList","TextListItem","style","maxWidth","margin","Text"],"mappings":"qRA+BeA,EAhBD,WACZ,IAAMC,EAAOC,yBAAe,cAY5B,OAAO,kBAAC,IAAD,CAAKC,MAAOF,EAAKG,iBAAiBC,gBAAgBF,S,UCoF5CG,UA/FE,kBACf,kBAAC,IAAD,CAAQC,MAAO,EAAGC,mBAAoBC,IAAoBC,SACxD,kBAAC,IAAD,CAAKC,MAAM,SACX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qDACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,2DACsD,IACpD,8CAFF,QAE6B,2CAF7B,KAIA,kBAACA,EAAA,EAAD,gGAGE,yBAAKC,MAAO,CAAEC,SAAS,QAAUC,OAAO,WACtC,kBAAC,EAAD,QAGJ,kBAACH,EAAA,EAAD,4HAKF,kBAACI,EAAA,EAAD,uFAIA,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,4FAIA,kBAACA,EAAA,EAAD,2BAEE,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qFAIA,kBAACA,EAAA,EAAD,gEAKJ,kBAACA,EAAA,EAAD,wBAEE,kBAACD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,6DAGA,kBAACA,EAAA,EAAD,oFAUZ,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,qDACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACM,EAAA,EAAD,wJAKA,kBAACL,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,4KAKA,kBAACA,EAAA,EAAD,qHAIA,kBAACA,EAAA,EAAD,0FAIA,kBAACA,EAAA,EAAD","file":"component---src-pages-test-js-a0ac589c7b267c1573c7.js","sourcesContent":["import React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\nimport Img from \"gatsby-image\"\r\n\r\n/*\r\n * This component is built using `gatsby-image` to automatically serve optimized\r\n * images with lazy loading and reduced file sizes. The image is loaded using a\r\n * `useStaticQuery`, which allows us to load the image from directly within this\r\n * component, rather than having to pass the image data down from pages.\r\n *\r\n * For more information, see the docs:\r\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\r\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nconst Image = () => {\r\n  const data = useStaticQuery(graphql`\r\n    query {\r\n      placeholderImage: file(relativePath: { eq: \"empty-state.png\" }) {\r\n        childImageSharp {\r\n          fluid(maxWidth: 300) {\r\n            ...GatsbyImageSharpFluid\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  return <Img fluid={data.placeholderImage.childImageSharp.fluid} />\r\n}\r\n\r\nexport default Image\r\n","import React from \"react\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport {\r\n  PageSectionVariants,\r\n  Card,\r\n  CardTitle,\r\n  CardBody,\r\n  Text,\r\n  TextContent,\r\n  TextList,\r\n  TextListItem,\r\n} from \"@patternfly/react-core\"\r\nimport ImageEmptyState from \"../components/image-empty-state\"\r\nimport \"../styles/override.css\"\r\n\r\nconst TestPage = () => (\r\n  <Layout index={3} pageSectionVariant={PageSectionVariants.default}>\r\n    <SEO title=\"Test\" />\r\n    <Card>\r\n      <CardTitle>Unit test using Jest and Enzyme in OpenShift</CardTitle>\r\n      <CardBody>\r\n        <TextContent>\r\n          <TextList>\r\n            <TextListItem>\r\n              There are 2 different kinds of alerts in OpenShift:{\" \"}\r\n              <b>Critical Alerts</b> and <b>Other Alerts</b>.\r\n            </TextListItem>\r\n            <TextListItem>\r\n              If there is no critical alert, the critical alert group will show\r\n              empty state like this:\r\n              <div style={{ maxWidth: `300px`, margin: `1rem 0` }}>\r\n                <ImageEmptyState />\r\n              </div>\r\n            </TextListItem>\r\n            <TextListItem>\r\n              Both group lists will be expanded if there are some alerts in that\r\n              group, and will be closed if there is no alert.\r\n            </TextListItem>\r\n          </TextList>\r\n          <Text>\r\n            Based on the background knowledges above, I implement the test cases\r\n            as below.\r\n          </Text>\r\n          <TextList>\r\n            <TextListItem>\r\n              Create some mock data, including only 3 other alerts but don't\r\n              have critical alert.\r\n            </TextListItem>\r\n            <TextListItem>\r\n              For critical alert:\r\n              <TextList>\r\n                <TextListItem>\r\n                  Check whether EmptyState component is in the React DOM tree,\r\n                  should be TRUE.\r\n                </TextListItem>\r\n                <TextListItem>\r\n                  Check whether the group is expanded, should be FALSE.\r\n                </TextListItem>\r\n              </TextList>\r\n            </TextListItem>\r\n            <TextListItem>\r\n              For other alert:\r\n              <TextList>\r\n                <TextListItem>\r\n                  Check whether the group is expanded, should be TRUE.\r\n                </TextListItem>\r\n                <TextListItem>\r\n                  Check whether the count of alerts in this group is 3, should\r\n                  be TRUE.\r\n                </TextListItem>\r\n              </TextList>\r\n            </TextListItem>\r\n          </TextList>\r\n        </TextContent>\r\n      </CardBody>\r\n    </Card>\r\n    <Card>\r\n      <CardTitle>Integration test using Cypress in PatternFly</CardTitle>\r\n      <CardBody>\r\n        <TextContent>\r\n          <Text>\r\n            Because there are some test cases for Notification Drawer in\r\n            PatternFly, I only create some test cases to test accessibility of\r\n            the components.\r\n          </Text>\r\n          <TextList>\r\n            <TextListItem>\r\n              When user press Enter key on the kebab toggle button in the\r\n              header, check whether the dropdown menu is expanded and whether it\r\n              focus on the first item in the menu.\r\n            </TextListItem>\r\n            <TextListItem>\r\n              When user press Tab key, check whether the dropdown menu closes\r\n              and it focus back to the kebab toggle button\r\n            </TextListItem>\r\n            <TextListItem>\r\n              When user press Enter key on a closed group, check whether the\r\n              group is expanded.\r\n            </TextListItem>\r\n            <TextListItem>\r\n              When user press Enter key on a expanded group, check whether the\r\n              group is closed.\r\n            </TextListItem>\r\n          </TextList>\r\n        </TextContent>\r\n      </CardBody>\r\n    </Card>\r\n  </Layout>\r\n)\r\n\r\nexport default TestPage\r\n"],"sourceRoot":""}